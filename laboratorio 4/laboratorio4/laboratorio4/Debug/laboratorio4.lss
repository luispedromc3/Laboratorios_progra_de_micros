
laboratorio4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000028a  0000031e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  0000032e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000af9  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000941  00000000  00000000  00000ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041b  00000000  00000000  00001832  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053a  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ce  00000000  00000000  0000225a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_3>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_16>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_21>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea e8       	ldi	r30, 0x8A	; 138
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 31       	cpi	r26, 0x10	; 16
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e1       	ldi	r26, 0x10	; 16
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a4 31       	cpi	r26, 0x14	; 20
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <main>
  ea:	0c 94 43 01 	jmp	0x286	; 0x286 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <initADC>:
	PCMSK0 = (1 << PCINT3)|(1 << PCINT2);
	initADC();
	sei();
}
void initADC(){
	ADMUX = 0;
  f2:	ec e7       	ldi	r30, 0x7C	; 124
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0) ; //VCC COMO COMPARADOR
  f8:	80 81       	ld	r24, Z
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR) ; //JUSTIFICADO A LA IZQUIERDA USAR HIGH
  fe:	80 81       	ld	r24, Z
 100:	80 62       	ori	r24, 0x20	; 32
 102:	80 83       	st	Z, r24
	ADMUX |= (1 << MUX2)|(1 << MUX1); //ADC6
 104:	80 81       	ld	r24, Z
 106:	86 60       	ori	r24, 0x06	; 6
 108:	80 83       	st	Z, r24
	ADCSRA = 0;
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADPS1) | (1 << ADPS0); //PRESCALER DE 128
 110:	80 81       	ld	r24, Z
 112:	83 60       	ori	r24, 0x03	; 3
 114:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);
 116:	80 81       	ld	r24, Z
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE); //ACTIVAR INTERRUPCIONES
 11c:	80 81       	ld	r24, Z
 11e:	88 60       	ori	r24, 0x08	; 8
 120:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //EMPEZAR EL ADC
 122:	80 81       	ld	r24, Z
 124:	80 64       	ori	r24, 0x40	; 64
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <setup>:
}
/****************************************/
// NON-Interrupt subroutines
void setup()
{
	cli();
 12a:	f8 94       	cli
	//CONFIGURAR presecaler general del CLK A 1MHz
	CLKPR = (1 << CLKPCE);
 12c:	e1 e6       	ldi	r30, 0x61	; 97
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	80 83       	st	Z, r24
	CLKPR = (1 << CLKPS2);
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	80 83       	st	Z, r24
	//PORTC COMO SALIDA DE LOS TRANSISTORES
	DDRC = 0XFF;
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	87 b9       	out	0x07, r24	; 7
	PORTC = 0X00;
 13c:	18 b8       	out	0x08, r1	; 8
	//PORTD COMO SALIDA
	DDRD = 0XFF;
 13e:	8a b9       	out	0x0a, r24	; 10
	UCSR0B = 0X00;
 140:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	PORTD = 0X00;
 144:	1b b8       	out	0x0b, r1	; 11
	//PORTB COMO ENTRADA DE LOS BOTONES pb2,pb3 y SALIDA de la alarma en pb4
	DDRB = 0b00010000;
 146:	80 e1       	ldi	r24, 0x10	; 16
 148:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b11101111; //ACTIVO PULL UPS
 14a:	8f ee       	ldi	r24, 0xEF	; 239
 14c:	85 b9       	out	0x05, r24	; 5
	//interrupciones de timer0
	TCCR0A	= 0X00;
 14e:	14 bc       	out	0x24, r1	; 36
	TCCR0B	= (1 << CS01) | (1 << CS00); //prescaler de 64
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	85 bd       	out	0x25, r24	; 37
	TCNT0	= 178; //cada 5ms
 154:	82 eb       	ldi	r24, 0xB2	; 178
 156:	86 bd       	out	0x26, r24	; 38
	TIMSK0	= (1 << TOIE0);
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	//INTERRUPCIONES PINCHANGE
	PCICR = (1 << PCIE0); // Habilitar PCINT en PORTB
 15e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK0 = (1 << PCINT3)|(1 << PCINT2);
 162:	8c e0       	ldi	r24, 0x0C	; 12
 164:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	initADC();
 168:	0e 94 79 00 	call	0xf2	; 0xf2 <initADC>
	sei();
 16c:	78 94       	sei
 16e:	08 95       	ret

00000170 <showDisplays>:
	ADCSRA |= (1 << ADIE); //ACTIVAR INTERRUPCIONES
	ADCSRA |= (1 << ADSC); //EMPEZAR EL ADC
}

void showDisplays(){
	switch (transistores){
 170:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <transistores>
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	71 f0       	breq	.+28     	; 0x194 <showDisplays+0x24>
 178:	18 f0       	brcs	.+6      	; 0x180 <showDisplays+0x10>
 17a:	82 30       	cpi	r24, 0x02	; 2
 17c:	a9 f0       	breq	.+42     	; 0x1a8 <showDisplays+0x38>
 17e:	1a c0       	rjmp	.+52     	; 0x1b4 <showDisplays+0x44>
		case 0:
		//aca enseno display decenas
		PORTC = 0x04; //0b0000 1000
 180:	84 e0       	ldi	r24, 0x04	; 4
 182:	88 b9       	out	0x08, r24	; 8
		PORTD = tabla[decenas];
 184:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	e0 50       	subi	r30, 0x00	; 0
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
 18e:	80 81       	ld	r24, Z
 190:	8b b9       	out	0x0b, r24	; 11
		break;
 192:	08 95       	ret
		case 1:
		//ense;o display unidades
		PORTC = 0x08; //0b0001 0000
 194:	88 e0       	ldi	r24, 0x08	; 8
 196:	88 b9       	out	0x08, r24	; 8
		
		PORTD = tabla[unidades];
 198:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <unidades>
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	e0 50       	subi	r30, 0x00	; 0
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	80 81       	ld	r24, Z
 1a4:	8b b9       	out	0x0b, r24	; 11
		
		break;
 1a6:	08 95       	ret
		case 2:
		//pc1 en cero para dar tierra a los leds
		PORTC = 0b00000010;
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	88 b9       	out	0x08, r24	; 8
		PORTD = contador;
 1ac:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <contador>
 1b0:	8b b9       	out	0x0b, r24	; 11
		break;
 1b2:	08 95       	ret
		
		default:
		transistores = 0;
 1b4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <transistores>
 1b8:	08 95       	ret

000001ba <alarma>:
		break;
	}
}
void alarma(){
	if (ADCH >= contador){
 1ba:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1be:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <contador>
 1c2:	98 17       	cp	r25, r24
 1c4:	20 f0       	brcs	.+8      	; 0x1ce <alarma+0x14>
		PORTB |= (1 << PORTB4);
 1c6:	85 b1       	in	r24, 0x05	; 5
 1c8:	80 61       	ori	r24, 0x10	; 16
 1ca:	85 b9       	out	0x05, r24	; 5
 1cc:	08 95       	ret
	}else{
		PORTB &= ~(1 << PORTB4);
 1ce:	85 b1       	in	r24, 0x05	; 5
 1d0:	8f 7e       	andi	r24, 0xEF	; 239
 1d2:	85 b9       	out	0x05, r24	; 5
 1d4:	08 95       	ret

000001d6 <main>:
void alarma();
/****************************************/
// Main Function
int main(void)
{
	setup();
 1d6:	0e 94 95 00 	call	0x12a	; 0x12a <setup>
	while (1)
	{
		//PORTD = contador;
		showDisplays();
 1da:	0e 94 b8 00 	call	0x170	; 0x170 <showDisplays>
		alarma();
 1de:	0e 94 dd 00 	call	0x1ba	; 0x1ba <alarma>
 1e2:	fb cf       	rjmp	.-10     	; 0x1da <main+0x4>

000001e4 <__vector_21>:
	}
	*/
}
/****************************************/
// Interrupt routines
ISR(ADC_vect){
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	8f 93       	push	r24
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	unidades = ADCH & 0x0F;
 1f4:	e9 e7       	ldi	r30, 0x79	; 121
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	8f 70       	andi	r24, 0x0F	; 15
 1fc:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <unidades>
	decenas = (ADCH >> 4) & 0x0F;  // Desplazar 4 bits a la derecha y limpiar bits altos
 200:	80 81       	ld	r24, Z
 202:	82 95       	swap	r24
 204:	8f 70       	andi	r24, 0x0F	; 15
 206:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	ADCSRA |= (1 << ADSC); //EMPEZAR EL ADC
 20a:	ea e7       	ldi	r30, 0x7A	; 122
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	80 64       	ori	r24, 0x40	; 64
 212:	80 83       	st	Z, r24
	
}
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	8f 91       	pop	r24
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	8f 93       	push	r24
	TCNT0	= 178;
 230:	82 eb       	ldi	r24, 0xB2	; 178
 232:	86 bd       	out	0x26, r24	; 38
	transistores++;
 234:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <transistores>
 238:	8f 5f       	subi	r24, 0xFF	; 255
 23a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <transistores>
	if (transistores == 3){
 23e:	83 30       	cpi	r24, 0x03	; 3
 240:	11 f4       	brne	.+4      	; 0x246 <__vector_16+0x22>
		transistores = 0;
 242:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <transistores>
	}
}
 246:	8f 91       	pop	r24
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <__vector_3>:
ISR(PCINT0_vect)  
{
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	8f 93       	push	r24
	if (!(PINB & (1 << PB2))) { // Si PB2 es presionado (LOW)
 25e:	1a 99       	sbic	0x03, 2	; 3
 260:	05 c0       	rjmp	.+10     	; 0x26c <__vector_3+0x1a>
		contador++;
 262:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <contador>
 266:	8f 5f       	subi	r24, 0xFF	; 255
 268:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <contador>
	}
	if (!(PINB & (1 << PB3))) { // Si PB3 es presionado (LOW)
 26c:	1b 99       	sbic	0x03, 3	; 3
 26e:	05 c0       	rjmp	.+10     	; 0x27a <__vector_3+0x28>
		contador--;
 270:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <contador>
 274:	81 50       	subi	r24, 0x01	; 1
 276:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <contador>
	}
}
 27a:	8f 91       	pop	r24
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
