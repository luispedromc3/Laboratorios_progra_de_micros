
prelab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a97  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000973  00000000  00000000  00000d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000330  00000000  00000000  000016de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001a10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d0  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000109  00000000  00000000  00001f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002099  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_18>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  c4:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <initUART>:

	sei();
}
void initUART(){
	//SALIDA Y ENTRADA DEL RX Y TX
	DDRD |= (1 << DDD1);
  cc:	8a b1       	in	r24, 0x0a	; 10
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD0);
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	8e 7f       	andi	r24, 0xFE	; 254
  d6:	8a b9       	out	0x0a, r24	; 10
	//conf de banderas
	UCSR0A = 0;
  d8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	//configurar UCSR0B
	UCSR0B |= (1 << RXCIE0)|(1 << RXEN0)|(1 << TXEN0);
  dc:	e1 ec       	ldi	r30, 0xC1	; 193
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	88 69       	ori	r24, 0x98	; 152
  e4:	80 83       	st	Z, r24
	//8 bits de datos, sin polaridad, 1 STOP BIT y asincrono
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
  e6:	e2 ec       	ldi	r30, 0xC2	; 194
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	86 60       	ori	r24, 0x06	; 6
  ee:	80 83       	st	Z, r24
	//configurar BAUDRATE, es decir velocidad de transmision. UBRR0 = 103 -> 9600 @ 16MHz
	UBRR0 = 103;
  f0:	87 e6       	ldi	r24, 0x67	; 103
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  fc:	08 95       	ret

000000fe <setup>:
	}
}
/****************************************/
// NON-Interrupt subroutines
void setup(){
	cli();
  fe:	f8 94       	cli
	initUART();
 100:	0e 94 66 00 	call	0xcc	; 0xcc <initUART>
	//portb como salida de los leds INICIALMENTE APAGADOS
	DDRB |= (1 << PORTB0)|(1 << PORTB1)|(1 << PORTB2)|(1 << PORTB3)|(1 << PORTB4)|(1 << PORTB5);
 104:	84 b1       	in	r24, 0x04	; 4
 106:	8f 63       	ori	r24, 0x3F	; 63
 108:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~( (1 << PORTB0)|(1 << PORTB1)|(1 << PORTB2)|(1 << PORTB3)|(1 << PORTB4)|(1 << PORTB5) );
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	80 7c       	andi	r24, 0xC0	; 192
 10e:	85 b9       	out	0x05, r24	; 5
	DDRC |= (1 << PORTC0)|(1 << PORTC1);
 110:	87 b1       	in	r24, 0x07	; 7
 112:	83 60       	ori	r24, 0x03	; 3
 114:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~((1 << PORTC0) | (1 << PORTC1));
 116:	88 b1       	in	r24, 0x08	; 8
 118:	8c 7f       	andi	r24, 0xFC	; 252
 11a:	88 b9       	out	0x08, r24	; 8

	sei();
 11c:	78 94       	sei
 11e:	08 95       	ret

00000120 <writeChar>:
	//configurar BAUDRATE, es decir velocidad de transmision. UBRR0 = 103 -> 9600 @ 16MHz
	UBRR0 = 103;
}
void writeChar(char caracter){
	//verificamos que se haya enviado cada dato, sino no enviamos
	uint8_t temporal = UCSR0A & (1 << UDRE0);
 120:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 124:	90 72       	andi	r25, 0x20	; 32
	while(temporal == 0){
 126:	03 c0       	rjmp	.+6      	; 0x12e <writeChar+0xe>
		//esperamos a que este se lea
		temporal = UCSR0A & (1 << UDRE0);
 128:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 12c:	90 72       	andi	r25, 0x20	; 32
	UBRR0 = 103;
}
void writeChar(char caracter){
	//verificamos que se haya enviado cada dato, sino no enviamos
	uint8_t temporal = UCSR0A & (1 << UDRE0);
	while(temporal == 0){
 12e:	99 23       	and	r25, r25
 130:	d9 f3       	breq	.-10     	; 0x128 <writeChar+0x8>
		//esperamos a que este se lea
		temporal = UCSR0A & (1 << UDRE0);
	}
	
	UDR0 = caracter;
 132:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 136:	08 95       	ret

00000138 <main>:
void writeChar(char caracter);
/****************************************/
// Main Function
int main(void)
{
	setup();
 138:	0e 94 7f 00 	call	0xfe	; 0xfe <setup>
	writeChar('H');
 13c:	88 e4       	ldi	r24, 0x48	; 72
 13e:	0e 94 90 00 	call	0x120	; 0x120 <writeChar>
	writeChar('o');
 142:	8f e6       	ldi	r24, 0x6F	; 111
 144:	0e 94 90 00 	call	0x120	; 0x120 <writeChar>
	writeChar('l');
 148:	8c e6       	ldi	r24, 0x6C	; 108
 14a:	0e 94 90 00 	call	0x120	; 0x120 <writeChar>
	writeChar('a');
 14e:	81 e6       	ldi	r24, 0x61	; 97
 150:	0e 94 90 00 	call	0x120	; 0x120 <writeChar>
	writeChar('.');
 154:	8e e2       	ldi	r24, 0x2E	; 46
 156:	0e 94 90 00 	call	0x120	; 0x120 <writeChar>
 15a:	ff cf       	rjmp	.-2      	; 0x15a <main+0x22>

0000015c <__vector_18>:
	UDR0 = caracter;
	
}
/****************************************/
// Interrupt routines
ISR(USART0_RX_vect){
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	2f 93       	push	r18
 168:	3f 93       	push	r19
 16a:	4f 93       	push	r20
 16c:	5f 93       	push	r21
 16e:	6f 93       	push	r22
 170:	7f 93       	push	r23
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	af 93       	push	r26
 178:	bf 93       	push	r27
 17a:	cf 93       	push	r28
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
	//aca es cuando recibe algo
	char temporal = UDR0;
 180:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	writeChar(temporal);
 184:	8c 2f       	mov	r24, r28
 186:	0e 94 90 00 	call	0x120	; 0x120 <writeChar>
	
	// 1. Escribir bits 0-5 en PORTB0-PORTB5
	PORTB = (PORTB & 0b11000000) | (temporal & 0b00111111);
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	80 7c       	andi	r24, 0xC0	; 192
 18e:	9c 2f       	mov	r25, r28
 190:	9f 73       	andi	r25, 0x3F	; 63
 192:	89 2b       	or	r24, r25
 194:	85 b9       	out	0x05, r24	; 5
	// 2. Escribir bits 6-7 en PORTC0-PORTC1
	PORTC = (PORTC & 0b11111100) | ((temporal >> 6) & (0b00000011));
 196:	88 b1       	in	r24, 0x08	; 8
 198:	8c 7f       	andi	r24, 0xFC	; 252
 19a:	c2 95       	swap	r28
 19c:	c6 95       	lsr	r28
 19e:	c6 95       	lsr	r28
 1a0:	c3 70       	andi	r28, 0x03	; 3
 1a2:	c8 2b       	or	r28, r24
 1a4:	c8 b9       	out	0x08, r28	; 8
	
	/*
	PORTB = temporal;
	PORTC = (temporal >> 6);
	*/
}
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	cf 91       	pop	r28
 1ac:	bf 91       	pop	r27
 1ae:	af 91       	pop	r26
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	7f 91       	pop	r23
 1b6:	6f 91       	pop	r22
 1b8:	5f 91       	pop	r21
 1ba:	4f 91       	pop	r20
 1bc:	3f 91       	pop	r19
 1be:	2f 91       	pop	r18
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
